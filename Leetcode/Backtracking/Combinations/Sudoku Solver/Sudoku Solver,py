class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        def is_valid(x, y, val):
            # check row
            for i in range(9):
                if board[x][i] == val:
                    return False
            # check column
            for i in range(9):
                if board[i][y] == val:
                    return False
            # check 3x3 sub-box
            for i in range(3):
                for j in range(3):
                    if board[(x // 3) * 3 + i][(y // 3) * 3 + j] == val:
                        return False
            return True

        def dfs(board):
            for i in range(9):
                for j in range(9):
                    if board[i][j] == ".":
                        for k in range(1, 10):
                            if is_valid(i, j, str(k)):
                                board[i][j] = str(k)
                                if dfs(board):
                                    return True
                                board[i][j] = "."
                        return False
            return True

        dfs(board)
